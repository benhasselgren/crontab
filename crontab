#------------------------------------------------- Coursework 1 Operating Systems -------------------------------------------------
#Author: Ben Hasselgren
#Matriculation number: 40416405
#Date last edited: 7/11/12

#------------------------------------------------- Methods -------------------------------------------------

#----------------------- Display Menu method -----------------------
#The code that displats the title and main menu
display_menu()
{
echo -e '\0033\0143'

echo "  _____                 _        _     "     
echo " / ____|               | |      | |    "    
echo "| |     _ __ ___  _ __ | |_ __ _| |__  "
echo "| |    | '__/ _ \| '_ \| __/ _  | '_ \ "
echo "| |____| | | (_) | | | | || (_| | |_) |"
echo " \_____|_|  \___/|_| |_|\__\__,_|_.__/ "
echo ""
echo "+---------------------------------+"
echo "|CRONTAB COMMANDS                 |"
echo "+---------------------------------+"
echo "|1 - Display Running Crontabs     |"
echo "+---------------------------------+"
echo "|2 - Insert a Job                 |"
echo "+---------------------------------+"
echo "|3 - Edit a Job                   |"
echo "+---------------------------------+"
echo "|4 - Remove a Job                 |"
echo "+---------------------------------+"
echo "|5 - Removes all Jobs             |"  
echo "+---------------------------------+"
echo "|9 - Exit                         |"
echo "+---------------------------------+"
}

#----------------------- Insert a job method -----------------------
#The method that inserts a new job into the crontab
insert()
{
    #clears the screen
    echo -e '\0033\0143'
    #regular expression that is used to check if the users input is a number
    re='^[0-9]+$'
    
    #EVERY WHILE LOOP HAS THE SAME PURPOSE HERE
    #It checks if the users input is a number first.
    #If it is not then it outputs an error
    #If it is then it checks if the user input is in the correct range for that crontab job field.
    #If it is not then it outputs an error
    #If it is then it is then valid is set to false and the while loop breaks out and goes to the next loop.
    valid=true
    while $valid; do
        echo "Enter minutes [0-59]"
        read mins
        if [[ $mins =~ $re ]]
            then
            if [ $mins -gt -1 ] && [ $mins -lt 60 ]
                then
                valid=false
            else
                echo "[INCORRECT INPUT!] Please enter a valid number in the range [0-59]"
                sleep 1
            fi
        else
            echo "[INCORRECT INPUT!] Please enter a number"
            sleep 1
        fi 
    done
	valid=true
    while $valid; do
        echo "Enter hours [0-23]"
        read hrs
        if [[ $hrs =~ $re ]]
            then
            if [ $hrs -gt -1 ] && [ $hrs -lt 24 ]
                then
                valid=false
            else
                echo "[INCORRECT INPUT!] Please enter a valid number in the range [0-23]"
                sleep 1
            fi
        else
            echo "[INCORRECT INPUT!] Please enter a number"
            sleep 1
        fi 
    done
	valid=true
    while $valid; do
        echo "Enter day [1-31]"
        read day
        if [[ $day =~ $re ]]
            then
            if [ $day -gt 0 ] && [ $day -lt 32 ]
                then
                valid=false
            else
                echo "[INCORRECT INPUT!] Please enter a valid number in the range [1-31]"
                sleep 1
            fi
        else
            echo "[INCORRECT INPUT!] Please enter a number"
            sleep 1
        fi 
    done
    valid=true
	while $valid; do
        echo "Enter month [1-12]"
        read mth
        if [[ $mth =~ $re ]]
            then
            if [ $mth -gt 0 ] && [ $mth -lt 13 ]
                then
                valid=false
            else
                echo "[INCORRECT INPUT!] Please enter a valid number in the range [1-12]"
                sleep 1
            fi
        else
            echo "[INCORRECT INPUT!] Please enter a number"
            sleep 1
        fi 
    done
    valid=true
	while $valid; do
        echo "Enter a day of the week [0-7]"
        read dweek
        if [[ $dweek =~ $re ]]
            then
            if [ $dweek -gt -1 ] && [ $dweek -lt 8 ]
                then
                valid=false
            else
                echo "[INCORRECT INPUT!] Please enter a valid number in the range [0-7]"
                sleep 1
            fi
        else
            echo "[INCORRECT INPUT!] Please enter a number"
            sleep 1
        fi 
    done
    
    #There is no validation for the command field as anything can be entered.
	echo "Enter the command"
	read command
	
    #Appends the variables into a string
	ctab="$mins $hrs $day $mth $dweek $command"
    
    #Appends the string to a file
	echo $ctab >> jobs.txt
    
    #Adds the file to a crontab
    crontab jobs.txt
}

#----------------------- Displays running crontabs method -----------------------
#The method that displays the running crontab jobs
display()
{ 
    #If file exists and is not empty then output file contents.
    if [ -f jobs.txt ] && [ -s jobs.txt ]
    then
        echo -e '\0033\0143'
        #Start index at 1
        index=1
        echo "Running Crontabs"
        echo "-----------------" 
        cat jobs.txt | while read line; 
            do   
                #Output line with index
                echo "$index) $line "
                #Increase index every iteration
                index=$((index+1))
            done
        echo ""
    else
        #If it doesn't exist or is empty then output appropriate message. 
        echo "no running crontabs to show for $USER"
    fi
}

#----------------------- Removes a job method -----------------------
#The method that removes a job
remove()
{
    #If file exists and is not empty then output file contents.
    if [ -f jobs.txt ] && [ -s jobs.txt ]
    then
        echo -e '\0033\0143'
        #Show jobs with indexes
        display
        echo "Please enter a job (e.g 1)"
        read line
        #Use sed command to remove selected line
        sed "${line}d" jobs.txt > file.tmp && mv file.tmp jobs.txt
        #add updated file to crontab
        crontab jobs.txt
    else
        #If it doesn't exist or is empty then output appropriate message. 
        echo "You can't remove any jobs as none exist"
        sleep 2
    fi
}

#----------------------- Removes all jobs method -----------------------
#The method that removes all jobs from the crontab
remove_all()
{
    echo -e '\0033\0143'
    #> command removes all contents from file
    > jobs.txt
    #Add updated file to crontab
    crontab jobs.txt
    echo "Jobs deleted"
}

#----------------------- Edits a job method -----------------------
#The method that edits the selected job
edit()
{
    #If file exists and is not empty then output file contents.
    if [ -f jobs.txt ] && [ -s jobs.txt ]
    then
        #Uses the remove and inserts methods to create the illusion that the user had edited a job
        remove
        insert
    else
        #If it doesn't exist or is empty then output appropriate message. 
        echo "You can't edit any jobs as none exist"
        sleep 2
    fi
}

#----------------------- Main method -----------------------
#The method that runs the program
main()
{
    run=true;
    while $run; do
        display_menu
        echo "Enter a number :"
        read input

        case $input in
            1)
                #List jobs
                display
                sleep 4
            ;;
            2)
                #Insert a job
                insert
                sleep 1
            ;;
            3)
                #Edit a job
                edit
                sleep 1
            ;;
            4)
                #Remove a job
                remove
                sleep 1
            ;;
            5)
                #Remove all jobs
                remove_all
                sleep 1
            ;;
            9)
                #Exit application
                echo "You are now exiting the crontab application"
                echo "Goodbye"
                sleep 1
                run=false;
            ;;
            *)
                #Will output error if user does not enter correct number
                echo "[Command not found!] Please enter a valid number"
                sleep 1;
            ;;
        esac
    done
}

#------------------------------------------------- Program Stars executing here -------------------------------------------------

#Clears the screen, displays the menu and title and asks for the users input
echo -e '\0033\0143'
main
echo -e '\0033\0143'